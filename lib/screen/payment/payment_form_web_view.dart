import 'package:aetteullo_cust/screen/payment/payment_success_screen.dart';
import 'package:aetteullo_cust/widget/appbar/mobile_app_bar.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';

class PaymentFormWebView extends StatefulWidget {
  final String url; // ex) https://192.168.0.13:8080/api/...
  final String? bearerToken; // JWT Î¨∏ÏûêÏó¥

  const PaymentFormWebView({super.key, required this.url, this.bearerToken});

  @override
  State<PaymentFormWebView> createState() => _PaymentFormWebViewState();
}

class _PaymentFormWebViewState extends State<PaymentFormWebView> {
  InAppWebViewController? _controller;
  bool _loading = true;
  String? _finalUrl;

  static const _bridgeName = 'onPaymentFinished';

  @override
  void initState() {
    super.initState();
    debugPrint('url: ${widget.url}');
    debugPrint('token: ${widget.bearerToken}');
  }

  @override
  void dispose() {
    try {
      _controller?.stopLoading();
      _controller?.pauseAllMediaPlayback();
      _controller?.pauseTimers();
      _controller?.clearFocus();
      _controller = null; // dispose()Îäî Î∂àÌïÑÏöî
    } catch (_) {}
    super.dispose();
  }

  // URLÎ°úÎ∂ÄÌÑ∞ Ïø†ÌÇ§ ÎèÑÎ©îÏù∏(origin) Íµ¨ÏÑ± (scheme://host[:port])
  WebUri _originFrom(String raw) {
    final u = WebUri(raw);
    final hasPort = u.port != 0;
    return WebUri('${u.scheme}://${u.host}${hasPort ? ':${u.port}' : ''}');
  }

  void _handlePaymentFinished(Map<String, dynamic> payload) {
    if (kDebugMode) debugPrint('üì© Payment Finished: $payload');

    final success = payload['success'] == true;

    if (success) {
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (_) => PaymentSuccessScreen()),
        ModalRoute.withName('/payment'),
      );
    } else {
      Navigator.pop(context);
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Í≤∞Ï†úÍ∞Ä Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§.')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MobileAppBar(
        title: 'Í≤∞Ï†ú',
        showBasket: false,
        showSearch: false,
        showNotification: false,
      ),
      body: Stack(
        children: [
          InAppWebView(
            // ‚ù∑ Ï≤´ Î°úÎìúÎäî onWebViewCreatedÏóêÏÑú Ïø†ÌÇ§ Ïã¨ÏùÄ Îí§ loadUrlÎ°ú ÏàòÌñâ
            initialSettings: InAppWebViewSettings(
              javaScriptEnabled: true,
              javaScriptCanOpenWindowsAutomatically: true,
              supportMultipleWindows: true,
            ),

            onWebViewCreated: (c) async {
              _controller = c;

              // ‚ù∂ JWT Ïø†ÌÇ§ ÏÑ∏ÌåÖ (ÌïÑÌÑ∞Í∞Ä JWT_TOKEN Ïø†ÌÇ§Î•º ÏùΩÏùå)
              final token = widget.bearerToken;
              if (token != null && token.isNotEmpty) {
                await CookieManager.instance().setCookie(
                  url: _originFrom(widget.url),
                  name: 'JWT_TOKEN',
                  value: token,
                  isHttpOnly: true,
                  sameSite: HTTPCookieSameSitePolicy.LAX,
                  path: '/',
                );
              }

              // Î∏åÎ¶øÏßÄ Îì±Î°ù (JS -> Flutter)
              _controller?.addJavaScriptHandler(
                handlerName: _bridgeName,
                callback: (args) async {
                  if (args.isNotEmpty && args.first is Map) {
                    _handlePaymentFinished(
                      Map<String, dynamic>.from(args.first),
                    );
                  }

                  return {'ack': true};
                },
              );

              // Ïø†ÌÇ§ ÏÑ∏ÌåÖ ÌõÑ ÏµúÏ¥à Î°úÎìú (ÏõêÌïòÎ©¥ Authorization Ìó§ÎçîÎèÑ Ï∂îÍ∞Ä Í∞ÄÎä•)
              await _controller?.loadUrl(
                urlRequest: URLRequest(
                  url: WebUri(widget.url),
                  // headers: {'Authorization': 'Bearer $token'}, // ÌïÑÏöî Ïãú
                ),
              );
            },

            onReceivedServerTrustAuthRequest: (controller, challenge) async {
              return ServerTrustAuthResponse(
                action: kReleaseMode
                    ? ServerTrustAuthResponseAction.CANCEL
                    : ServerTrustAuthResponseAction.PROCEED,
              );
            },

            // ÌåùÏóÖÏùÑ ÎèôÏùº WebViewÏóêÏÑú Ïó¥Í∏∞ (WebChrome Í∑úÏπôÏÉÅ false Î∞òÌôò)
            onCreateWindow: (controller, action) async {
              controller.loadUrl(urlRequest: action.request);
              return false; // ÏÉà WebViewÎ•º ÎßåÎì§ÏßÄ ÏïäÏùå
            },

            onLoadStart: (controller, url) {
              if (kDebugMode) debugPrint('‚û°Ô∏è start: $url');
              setState(() => _loading = true);
            },
            onLoadStop: (controller, url) async {
              _finalUrl = url?.toString();
              if (kDebugMode) {
                debugPrint('üîö FINAL URL: $_finalUrl');
                final current = await controller.getUrl();
                debugPrint('üåê controller.getUrl(): ${current?.toString()}');
              }
              setState(() => _loading = false);
            },
            onReceivedError: (controller, request, error) {
              if (kDebugMode) {
                debugPrint('‚ùå WebView error: ${error.description}');
              }
              setState(() => _loading = false);
            },
          ),

          if (_loading) const Center(child: CircularProgressIndicator()),
        ],
      ),
    );
  }
}
